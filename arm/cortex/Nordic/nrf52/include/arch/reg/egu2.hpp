/*
 * OpenMPTL - C++ Microprocessor Template Library
 *
 * This program is a derivative representation of a CMSIS System View
 * Description (SVD) file, and is subject to the corresponding license
 * (see "License.txt" in the parent directory).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 */

////////////////////////////////////////////////////////////////////////
//
//  Import from CMSIS-SVD: "Nordic/nrf52.svd"
//
//  vendor: Nordic Semiconductor
//  vendorID: Nordic
//  name: nrf52
//  series: nrf52
//  version: 1
//  description: nRF52 reference description for radio MCU with ARM 32-bit Cortex-M4 Microcontroller
//  --------------------------------------------------------------------
//
//  C++ Header file, containing architecture specific register
//  declarations for use in OpenMPTL. It has been converted directly
//  from a CMSIS-SVD file.
//
//  https://digint.ch/openmptl
//  https://github.com/posborne/cmsis-svd
//

#ifndef ARCH_REG_EGU2_HPP_INCLUDED
#define ARCH_REG_EGU2_HPP_INCLUDED

#warning "using untested register declarations"

#include <register.hpp>

namespace mptl {

/**
 * Event Generator Unit 2
 *
 * (derived from: EGU0)
 */
struct EGU2
{
  static constexpr reg_addr_t base_addr = 0x40016000;

  /**
   * Description collection[0]: Trigger 0 for triggering the corresponding TRIGGERED[0] event
   */
  struct TASKS_TRIGGER[%s]
  : public reg< uint32_t, base_addr + 0x000, wo, 0 >
  {
  };

  /**
   * Description collection[0]: Event number 0 generated by triggering the corresponding TRIGGER[0] task
   */
  struct EVENTS_TRIGGERED[%s]
  : public reg< uint32_t, base_addr + 0x100, rw, 0 /* svd2hpp: missing resetValue! */ >
  {
  };

  /**
   * Enable or disable interrupt
   */
  struct INTEN
  : public reg< uint32_t, base_addr + 0x300, rw, 0 /* svd2hpp: missing resetValue! */ >
  {
    using type = reg< uint32_t, base_addr + 0x300, rw, 0 /* svd2hpp: missing resetValue! */ >;

    using TRIGGERED0   = regbits< type,  0,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[0] event   */
    using TRIGGERED1   = regbits< type,  1,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[1] event   */
    using TRIGGERED2   = regbits< type,  2,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[2] event   */
    using TRIGGERED3   = regbits< type,  3,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[3] event   */
    using TRIGGERED4   = regbits< type,  4,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[4] event   */
    using TRIGGERED5   = regbits< type,  5,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[5] event   */
    using TRIGGERED6   = regbits< type,  6,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[6] event   */
    using TRIGGERED7   = regbits< type,  7,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[7] event   */
    using TRIGGERED8   = regbits< type,  8,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[8] event   */
    using TRIGGERED9   = regbits< type,  9,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[9] event   */
    using TRIGGERED10  = regbits< type, 10,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[10] event  */
    using TRIGGERED11  = regbits< type, 11,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[11] event  */
    using TRIGGERED12  = regbits< type, 12,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[12] event  */
    using TRIGGERED13  = regbits< type, 13,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[13] event  */
    using TRIGGERED14  = regbits< type, 14,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[14] event  */
    using TRIGGERED15  = regbits< type, 15,  1 >;  /**< Enable or disable interrupt on EVENTS_TRIGGERED[15] event  */
  };

  /**
   * Enable interrupt
   */
  struct INTENSET
  : public reg< uint32_t, base_addr + 0x304, rw, 0 /* svd2hpp: missing resetValue! */ >
  {
    using type = reg< uint32_t, base_addr + 0x304, rw, 0 /* svd2hpp: missing resetValue! */ >;

    using TRIGGERED0   = regbits< type,  0,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[0] event   */
    using TRIGGERED1   = regbits< type,  1,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[1] event   */
    using TRIGGERED2   = regbits< type,  2,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[2] event   */
    using TRIGGERED3   = regbits< type,  3,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[3] event   */
    using TRIGGERED4   = regbits< type,  4,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[4] event   */
    using TRIGGERED5   = regbits< type,  5,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[5] event   */
    using TRIGGERED6   = regbits< type,  6,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[6] event   */
    using TRIGGERED7   = regbits< type,  7,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[7] event   */
    using TRIGGERED8   = regbits< type,  8,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[8] event   */
    using TRIGGERED9   = regbits< type,  9,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[9] event   */
    using TRIGGERED10  = regbits< type, 10,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[10] event  */
    using TRIGGERED11  = regbits< type, 11,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[11] event  */
    using TRIGGERED12  = regbits< type, 12,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[12] event  */
    using TRIGGERED13  = regbits< type, 13,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[13] event  */
    using TRIGGERED14  = regbits< type, 14,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[14] event  */
    using TRIGGERED15  = regbits< type, 15,  1 >;  /**< Write '1' to Enable interrupt on EVENTS_TRIGGERED[15] event  */
  };

  /**
   * Disable interrupt
   */
  struct INTENCLR
  : public reg< uint32_t, base_addr + 0x308, rw, 0 /* svd2hpp: missing resetValue! */ >
  {
    using type = reg< uint32_t, base_addr + 0x308, rw, 0 /* svd2hpp: missing resetValue! */ >;

    using TRIGGERED0   = regbits< type,  0,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[0] event   */
    using TRIGGERED1   = regbits< type,  1,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[1] event   */
    using TRIGGERED2   = regbits< type,  2,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[2] event   */
    using TRIGGERED3   = regbits< type,  3,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[3] event   */
    using TRIGGERED4   = regbits< type,  4,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[4] event   */
    using TRIGGERED5   = regbits< type,  5,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[5] event   */
    using TRIGGERED6   = regbits< type,  6,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[6] event   */
    using TRIGGERED7   = regbits< type,  7,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[7] event   */
    using TRIGGERED8   = regbits< type,  8,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[8] event   */
    using TRIGGERED9   = regbits< type,  9,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[9] event   */
    using TRIGGERED10  = regbits< type, 10,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[10] event  */
    using TRIGGERED11  = regbits< type, 11,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[11] event  */
    using TRIGGERED12  = regbits< type, 12,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[12] event  */
    using TRIGGERED13  = regbits< type, 13,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[13] event  */
    using TRIGGERED14  = regbits< type, 14,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[14] event  */
    using TRIGGERED15  = regbits< type, 15,  1 >;  /**< Write '1' to Clear interrupt on EVENTS_TRIGGERED[15] event  */
  };
};
} // namespace mptl

#endif // ARCH_REG_EGU2_HPP_INCLUDED
