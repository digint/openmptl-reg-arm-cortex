/*
 * OpenMPTL - C++ Microprocessor Template Library
 *
 * This program is a derivative representation of a CMSIS System View
 * Description (SVD) file, and is subject to the corresponding license
 * (see "License.txt" in the parent directory).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 */

////////////////////////////////////////////////////////////////////////
//
//  Import from CMSIS-SVD: "Nordic/nrf52.svd"
//
//  vendor: Nordic Semiconductor
//  vendorID: Nordic
//  name: nrf52
//  series: nrf52
//  version: 1
//  description: nRF52 reference description for radio MCU with ARM 32-bit Cortex-M4 Microcontroller
//  --------------------------------------------------------------------
//
//  C++ Header file, containing architecture specific register
//  declarations for use in OpenMPTL. It has been converted directly
//  from a CMSIS-SVD file.
//
//  https://digint.ch/openmptl
//  https://github.com/posborne/cmsis-svd
//

#ifndef ARCH_REG_ADDRESS_MAP_HPP_INCLUDED
#define ARCH_REG_ADDRESS_MAP_HPP_INCLUDED

#warning "using untested register declarations"

#include <register_type.hpp>

namespace mptl {

template<reg_addr_t addr>
struct address_map {
  static constexpr const char * name_str = nullptr;
};

template<> struct address_map< 0x10000010 > { static constexpr const char * name_str = "FICR::CODEPAGESIZE"; };
template<> struct address_map< 0x10000014 > { static constexpr const char * name_str = "FICR::CODESIZE"; };
template<> struct address_map< 0x1000005c > { static constexpr const char * name_str = "FICR::CONFIGID"; };
template<> struct address_map< 0x10000060 > { static constexpr const char * name_str = "FICR::DEVICEID[%s]"; };
template<> struct address_map< 0x10000080 > { static constexpr const char * name_str = "FICR::ER[%s]"; };
template<> struct address_map< 0x10000090 > { static constexpr const char * name_str = "FICR::IR[%s]"; };
template<> struct address_map< 0x100000a0 > { static constexpr const char * name_str = "FICR::DEVICEADDRTYPE"; };
template<> struct address_map< 0x100000a4 > { static constexpr const char * name_str = "FICR::DEVICEADDR[%s]"; };
template<> struct address_map< 0x10001000 > { static constexpr const char * name_str = "UICR::UNUSED0"; };
template<> struct address_map< 0x10001004 > { static constexpr const char * name_str = "UICR::UNUSED1"; };
template<> struct address_map< 0x10001008 > { static constexpr const char * name_str = "UICR::UNUSED2"; };
template<> struct address_map< 0x10001010 > { static constexpr const char * name_str = "UICR::UNUSED3"; };
template<> struct address_map< 0x10001014 > { static constexpr const char * name_str = "UICR::NRFFW[%s]"; };
template<> struct address_map< 0x10001050 > { static constexpr const char * name_str = "UICR::NRFHW[%s]"; };
template<> struct address_map< 0x10001080 > { static constexpr const char * name_str = "UICR::CUSTOMER[%s]"; };
template<> struct address_map< 0x10001200 > { static constexpr const char * name_str = "UICR::PSELRESET[%s]"; };
template<> struct address_map< 0x10001208 > { static constexpr const char * name_str = "UICR::APPROTECT"; };
template<> struct address_map< 0x1000120c > { static constexpr const char * name_str = "UICR::NFCPINS"; };
template<> struct address_map< 0x40000000 > { static constexpr const char * name_str = "CLOCK::TASKS_HFCLKSTART"; };
template<> struct address_map< 0x40000004 > { static constexpr const char * name_str = "CLOCK::TASKS_HFCLKSTOP"; };
template<> struct address_map< 0x40000008 > { static constexpr const char * name_str = "CLOCK::TASKS_LFCLKSTART"; };
template<> struct address_map< 0x4000000c > { static constexpr const char * name_str = "CLOCK::TASKS_LFCLKSTOP"; };
template<> struct address_map< 0x40000010 > { static constexpr const char * name_str = "CLOCK::TASKS_CAL"; };
template<> struct address_map< 0x40000014 > { static constexpr const char * name_str = "CLOCK::TASKS_CTSTART"; };
template<> struct address_map< 0x40000018 > { static constexpr const char * name_str = "CLOCK::TASKS_CTSTOP"; };
template<> struct address_map< 0x40000078 > { static constexpr const char * name_str = "POWER::TASKS_CONSTLAT"; };
template<> struct address_map< 0x4000007c > { static constexpr const char * name_str = "POWER::TASKS_LOWPWR"; };
template<> struct address_map< 0x40000100 > { static constexpr const char * name_str = "CLOCK::EVENTS_HFCLKSTARTED"; };
template<> struct address_map< 0x40000104 > { static constexpr const char * name_str = "CLOCK::EVENTS_LFCLKSTARTED"; };
template<> struct address_map< 0x40000108 > { static constexpr const char * name_str = "POWER::EVENTS_POFWARN"; };
template<> struct address_map< 0x4000010c > { static constexpr const char * name_str = "CLOCK::EVENTS_DONE"; };
template<> struct address_map< 0x40000110 > { static constexpr const char * name_str = "CLOCK::EVENTS_CTTO"; };
template<> struct address_map< 0x40000114 > { static constexpr const char * name_str = "POWER::EVENTS_SLEEPENTER"; };
template<> struct address_map< 0x40000118 > { static constexpr const char * name_str = "POWER::EVENTS_SLEEPEXIT"; };
template<> struct address_map< 0x40000304 > { static constexpr const char * name_str = "CLOCK::INTENSET"; };  /* svd2hpp: duplicate address for: CLOCK::INTENSET, POWER::INTENSET */
template<> struct address_map< 0x40000308 > { static constexpr const char * name_str = "CLOCK::INTENCLR"; };  /* svd2hpp: duplicate address for: CLOCK::INTENCLR, POWER::INTENCLR */
template<> struct address_map< 0x40000400 > { static constexpr const char * name_str = "POWER::RESETREAS"; };
template<> struct address_map< 0x40000408 > { static constexpr const char * name_str = "CLOCK::HFCLKRUN"; };
template<> struct address_map< 0x4000040c > { static constexpr const char * name_str = "CLOCK::HFCLKSTAT"; };
template<> struct address_map< 0x40000414 > { static constexpr const char * name_str = "CLOCK::LFCLKRUN"; };
template<> struct address_map< 0x40000418 > { static constexpr const char * name_str = "CLOCK::LFCLKSTAT"; };
template<> struct address_map< 0x4000041c > { static constexpr const char * name_str = "CLOCK::LFCLKSRCCOPY"; };
template<> struct address_map< 0x40000428 > { static constexpr const char * name_str = "POWER::RAMSTATUS"; };
template<> struct address_map< 0x40000500 > { static constexpr const char * name_str = "POWER::SYSTEMOFF"; };
template<> struct address_map< 0x40000510 > { static constexpr const char * name_str = "POWER::POFCON"; };
template<> struct address_map< 0x40000518 > { static constexpr const char * name_str = "CLOCK::LFCLKSRC"; };
template<> struct address_map< 0x4000051c > { static constexpr const char * name_str = "POWER::GPREGRET"; };
template<> struct address_map< 0x40000520 > { static constexpr const char * name_str = "POWER::GPREGRET2"; };
template<> struct address_map< 0x40000524 > { static constexpr const char * name_str = "POWER::RAMON"; };
template<> struct address_map< 0x40000538 > { static constexpr const char * name_str = "CLOCK::CTIV"; };
template<> struct address_map< 0x40000554 > { static constexpr const char * name_str = "POWER::RAMONB"; };
template<> struct address_map< 0x4000055c > { static constexpr const char * name_str = "CLOCK::TRACECONFIG"; };
template<> struct address_map< 0x40000578 > { static constexpr const char * name_str = "POWER::DCDCEN"; };
template<> struct address_map< 0x40000600 > { static constexpr const char * name_str = "BPROT::CONFIG0"; };
template<> struct address_map< 0x40000604 > { static constexpr const char * name_str = "BPROT::CONFIG1"; };
template<> struct address_map< 0x40000608 > { static constexpr const char * name_str = "BPROT::DISABLEINDEBUG"; };
template<> struct address_map< 0x4000060c > { static constexpr const char * name_str = "BPROT::UNUSED0"; };
template<> struct address_map< 0x40000610 > { static constexpr const char * name_str = "BPROT::CONFIG2"; };
template<> struct address_map< 0x40000614 > { static constexpr const char * name_str = "BPROT::CONFIG3"; };
template<> struct address_map< 0x40001000 > { static constexpr const char * name_str = "RADIO::TASKS_TXEN"; };
template<> struct address_map< 0x40001004 > { static constexpr const char * name_str = "RADIO::TASKS_RXEN"; };
template<> struct address_map< 0x40001008 > { static constexpr const char * name_str = "RADIO::TASKS_START"; };
template<> struct address_map< 0x4000100c > { static constexpr const char * name_str = "RADIO::TASKS_STOP"; };
template<> struct address_map< 0x40001010 > { static constexpr const char * name_str = "RADIO::TASKS_DISABLE"; };
template<> struct address_map< 0x40001014 > { static constexpr const char * name_str = "RADIO::TASKS_RSSISTART"; };
template<> struct address_map< 0x40001018 > { static constexpr const char * name_str = "RADIO::TASKS_RSSISTOP"; };
template<> struct address_map< 0x4000101c > { static constexpr const char * name_str = "RADIO::TASKS_BCSTART"; };
template<> struct address_map< 0x40001020 > { static constexpr const char * name_str = "RADIO::TASKS_BCSTOP"; };
template<> struct address_map< 0x40001100 > { static constexpr const char * name_str = "RADIO::EVENTS_READY"; };
template<> struct address_map< 0x40001104 > { static constexpr const char * name_str = "RADIO::EVENTS_ADDRESS"; };
template<> struct address_map< 0x40001108 > { static constexpr const char * name_str = "RADIO::EVENTS_PAYLOAD"; };
template<> struct address_map< 0x4000110c > { static constexpr const char * name_str = "RADIO::EVENTS_END"; };
template<> struct address_map< 0x40001110 > { static constexpr const char * name_str = "RADIO::EVENTS_DISABLED"; };
template<> struct address_map< 0x40001114 > { static constexpr const char * name_str = "RADIO::EVENTS_DEVMATCH"; };
template<> struct address_map< 0x40001118 > { static constexpr const char * name_str = "RADIO::EVENTS_DEVMISS"; };
template<> struct address_map< 0x4000111c > { static constexpr const char * name_str = "RADIO::EVENTS_RSSIEND"; };
template<> struct address_map< 0x40001128 > { static constexpr const char * name_str = "RADIO::EVENTS_BCMATCH"; };
template<> struct address_map< 0x40001130 > { static constexpr const char * name_str = "RADIO::EVENTS_CRCOK"; };
template<> struct address_map< 0x40001134 > { static constexpr const char * name_str = "RADIO::EVENTS_CRCERROR"; };
template<> struct address_map< 0x40001200 > { static constexpr const char * name_str = "RADIO::SHORTS"; };
template<> struct address_map< 0x40001304 > { static constexpr const char * name_str = "RADIO::INTENSET"; };
template<> struct address_map< 0x40001308 > { static constexpr const char * name_str = "RADIO::INTENCLR"; };
template<> struct address_map< 0x40001400 > { static constexpr const char * name_str = "RADIO::CRCSTATUS"; };
template<> struct address_map< 0x40001408 > { static constexpr const char * name_str = "RADIO::RXMATCH"; };
template<> struct address_map< 0x4000140c > { static constexpr const char * name_str = "RADIO::RXCRC"; };
template<> struct address_map< 0x40001410 > { static constexpr const char * name_str = "RADIO::DAI"; };
template<> struct address_map< 0x40001504 > { static constexpr const char * name_str = "RADIO::PACKETPTR"; };
template<> struct address_map< 0x40001508 > { static constexpr const char * name_str = "RADIO::FREQUENCY"; };
template<> struct address_map< 0x4000150c > { static constexpr const char * name_str = "RADIO::TXPOWER"; };
template<> struct address_map< 0x40001510 > { static constexpr const char * name_str = "RADIO::MODE"; };
template<> struct address_map< 0x40001514 > { static constexpr const char * name_str = "RADIO::PCNF0"; };
template<> struct address_map< 0x40001518 > { static constexpr const char * name_str = "RADIO::PCNF1"; };
template<> struct address_map< 0x4000151c > { static constexpr const char * name_str = "RADIO::BASE0"; };
template<> struct address_map< 0x40001520 > { static constexpr const char * name_str = "RADIO::BASE1"; };
template<> struct address_map< 0x40001524 > { static constexpr const char * name_str = "RADIO::PREFIX0"; };
template<> struct address_map< 0x40001528 > { static constexpr const char * name_str = "RADIO::PREFIX1"; };
template<> struct address_map< 0x4000152c > { static constexpr const char * name_str = "RADIO::TXADDRESS"; };
template<> struct address_map< 0x40001530 > { static constexpr const char * name_str = "RADIO::RXADDRESSES"; };
template<> struct address_map< 0x40001534 > { static constexpr const char * name_str = "RADIO::CRCCNF"; };
template<> struct address_map< 0x40001538 > { static constexpr const char * name_str = "RADIO::CRCPOLY"; };
template<> struct address_map< 0x4000153c > { static constexpr const char * name_str = "RADIO::CRCINIT"; };
template<> struct address_map< 0x40001540 > { static constexpr const char * name_str = "RADIO::UNUSED0"; };
template<> struct address_map< 0x40001544 > { static constexpr const char * name_str = "RADIO::TIFS"; };
template<> struct address_map< 0x40001548 > { static constexpr const char * name_str = "RADIO::RSSISAMPLE"; };
template<> struct address_map< 0x40001550 > { static constexpr const char * name_str = "RADIO::STATE"; };
template<> struct address_map< 0x40001554 > { static constexpr const char * name_str = "RADIO::DATAWHITEIV"; };
template<> struct address_map< 0x40001560 > { static constexpr const char * name_str = "RADIO::BCC"; };
template<> struct address_map< 0x40001600 > { static constexpr const char * name_str = "RADIO::DAB[%s]"; };
template<> struct address_map< 0x40001620 > { static constexpr const char * name_str = "RADIO::DAP[%s]"; };
template<> struct address_map< 0x40001640 > { static constexpr const char * name_str = "RADIO::DACNF"; };
template<> struct address_map< 0x40001650 > { static constexpr const char * name_str = "RADIO::MODECNF0"; };
template<> struct address_map< 0x40001ffc > { static constexpr const char * name_str = "RADIO::POWER"; };
template<> struct address_map< 0x40002000 > { static constexpr const char * name_str = "UART0::TASKS_STARTRX"; };  /* svd2hpp: duplicate address for: UART0::TASKS_STARTRX, UARTE0::TASKS_STARTRX */
template<> struct address_map< 0x40002004 > { static constexpr const char * name_str = "UART0::TASKS_STOPRX"; };  /* svd2hpp: duplicate address for: UART0::TASKS_STOPRX, UARTE0::TASKS_STOPRX */
template<> struct address_map< 0x40002008 > { static constexpr const char * name_str = "UART0::TASKS_STARTTX"; };  /* svd2hpp: duplicate address for: UART0::TASKS_STARTTX, UARTE0::TASKS_STARTTX */
template<> struct address_map< 0x4000200c > { static constexpr const char * name_str = "UART0::TASKS_STOPTX"; };  /* svd2hpp: duplicate address for: UART0::TASKS_STOPTX, UARTE0::TASKS_STOPTX */
template<> struct address_map< 0x4000201c > { static constexpr const char * name_str = "UART0::TASKS_SUSPEND"; };
template<> struct address_map< 0x4000202c > { static constexpr const char * name_str = "UARTE0::TASKS_FLUSHRX"; };
template<> struct address_map< 0x40002100 > { static constexpr const char * name_str = "UART0::EVENTS_CTS"; };  /* svd2hpp: duplicate address for: UART0::EVENTS_CTS, UARTE0::EVENTS_CTS */
template<> struct address_map< 0x40002104 > { static constexpr const char * name_str = "UART0::EVENTS_NCTS"; };  /* svd2hpp: duplicate address for: UART0::EVENTS_NCTS, UARTE0::EVENTS_NCTS */
template<> struct address_map< 0x40002108 > { static constexpr const char * name_str = "UART0::EVENTS_RXDRDY"; };
template<> struct address_map< 0x40002110 > { static constexpr const char * name_str = "UARTE0::EVENTS_ENDRX"; };
template<> struct address_map< 0x4000211c > { static constexpr const char * name_str = "UART0::EVENTS_TXDRDY"; };
template<> struct address_map< 0x40002120 > { static constexpr const char * name_str = "UARTE0::EVENTS_ENDTX"; };
template<> struct address_map< 0x40002124 > { static constexpr const char * name_str = "UART0::EVENTS_ERROR"; };  /* svd2hpp: duplicate address for: UART0::EVENTS_ERROR, UARTE0::EVENTS_ERROR */
template<> struct address_map< 0x40002144 > { static constexpr const char * name_str = "UART0::EVENTS_RXTO"; };  /* svd2hpp: duplicate address for: UART0::EVENTS_RXTO, UARTE0::EVENTS_RXTO */
template<> struct address_map< 0x4000214c > { static constexpr const char * name_str = "UARTE0::EVENTS_RXSTARTED"; };
template<> struct address_map< 0x40002150 > { static constexpr const char * name_str = "UARTE0::EVENTS_TXSTARTED"; };
template<> struct address_map< 0x40002158 > { static constexpr const char * name_str = "UARTE0::EVENTS_TXSTOPPED"; };
template<> struct address_map< 0x40002200 > { static constexpr const char * name_str = "UART0::SHORTS"; };  /* svd2hpp: duplicate address for: UART0::SHORTS, UARTE0::SHORTS */
template<> struct address_map< 0x40002300 > { static constexpr const char * name_str = "UARTE0::INTEN"; };
template<> struct address_map< 0x40002304 > { static constexpr const char * name_str = "UART0::INTENSET"; };  /* svd2hpp: duplicate address for: UART0::INTENSET, UARTE0::INTENSET */
template<> struct address_map< 0x40002308 > { static constexpr const char * name_str = "UART0::INTENCLR"; };  /* svd2hpp: duplicate address for: UART0::INTENCLR, UARTE0::INTENCLR */
template<> struct address_map< 0x40002480 > { static constexpr const char * name_str = "UART0::ERRORSRC"; };  /* svd2hpp: duplicate address for: UART0::ERRORSRC, UARTE0::ERRORSRC */
template<> struct address_map< 0x40002500 > { static constexpr const char * name_str = "UART0::ENABLE"; };  /* svd2hpp: duplicate address for: UART0::ENABLE, UARTE0::ENABLE */
template<> struct address_map< 0x40002508 > { static constexpr const char * name_str = "UART0::PSELRTS"; };
template<> struct address_map< 0x4000250c > { static constexpr const char * name_str = "UART0::PSELTXD"; };
template<> struct address_map< 0x40002510 > { static constexpr const char * name_str = "UART0::PSELCTS"; };
template<> struct address_map< 0x40002514 > { static constexpr const char * name_str = "UART0::PSELRXD"; };
template<> struct address_map< 0x40002518 > { static constexpr const char * name_str = "UART0::RXD"; };
template<> struct address_map< 0x4000251c > { static constexpr const char * name_str = "UART0::TXD"; };
template<> struct address_map< 0x40002524 > { static constexpr const char * name_str = "UART0::BAUDRATE"; };  /* svd2hpp: duplicate address for: UART0::BAUDRATE, UARTE0::BAUDRATE */
template<> struct address_map< 0x4000256c > { static constexpr const char * name_str = "UART0::CONFIG"; };  /* svd2hpp: duplicate address for: UART0::CONFIG, UARTE0::CONFIG */
template<> struct address_map< 0x40003000 > { static constexpr const char * name_str = "TWI0::TASKS_STARTRX"; };  /* svd2hpp: duplicate address for: TWI0::TASKS_STARTRX, TWIM0::TASKS_STARTRX */
template<> struct address_map< 0x40003008 > { static constexpr const char * name_str = "TWI0::TASKS_STARTTX"; };  /* svd2hpp: duplicate address for: TWI0::TASKS_STARTTX, TWIM0::TASKS_STARTTX */
template<> struct address_map< 0x40003010 > { static constexpr const char * name_str = "SPIM0::TASKS_START"; };
template<> struct address_map< 0x40003014 > { static constexpr const char * name_str = "TWI0::TASKS_STOP"; };  /* svd2hpp: duplicate address for: SPIM0::TASKS_STOP, TWI0::TASKS_STOP, TWIM0::TASKS_STOP, TWIS0::TASKS_STOP */
template<> struct address_map< 0x4000301c > { static constexpr const char * name_str = "TWI0::TASKS_SUSPEND"; };  /* svd2hpp: duplicate address for: SPIM0::TASKS_SUSPEND, TWI0::TASKS_SUSPEND, TWIM0::TASKS_SUSPEND, TWIS0::TASKS_SUSPEND */
template<> struct address_map< 0x40003020 > { static constexpr const char * name_str = "TWI0::TASKS_RESUME"; };  /* svd2hpp: duplicate address for: SPIM0::TASKS_RESUME, TWI0::TASKS_RESUME, TWIM0::TASKS_RESUME, TWIS0::TASKS_RESUME */
template<> struct address_map< 0x40003024 > { static constexpr const char * name_str = "SPIS0::TASKS_ACQUIRE"; };
template<> struct address_map< 0x40003028 > { static constexpr const char * name_str = "SPIS0::TASKS_RELEASE"; };
template<> struct address_map< 0x40003030 > { static constexpr const char * name_str = "TWIS0::TASKS_PREPARERX"; };
template<> struct address_map< 0x40003034 > { static constexpr const char * name_str = "TWIS0::TASKS_PREPARETX"; };
template<> struct address_map< 0x40003104 > { static constexpr const char * name_str = "SPIS0::EVENTS_END"; };  /* svd2hpp: duplicate address for: SPIM0::EVENTS_STOPPED, SPIS0::EVENTS_END, TWI0::EVENTS_STOPPED, TWIM0::EVENTS_STOPPED, TWIS0::EVENTS_STOPPED */
template<> struct address_map< 0x40003108 > { static constexpr const char * name_str = "SPI0::EVENTS_READY"; };  /* svd2hpp: duplicate address for: SPI0::EVENTS_READY, TWI0::EVENTS_RXDREADY */
template<> struct address_map< 0x40003110 > { static constexpr const char * name_str = "SPIM0::EVENTS_ENDRX"; };
template<> struct address_map< 0x40003118 > { static constexpr const char * name_str = "SPIM0::EVENTS_END"; };
template<> struct address_map< 0x4000311c > { static constexpr const char * name_str = "TWI0::EVENTS_TXDSENT"; };
template<> struct address_map< 0x40003120 > { static constexpr const char * name_str = "SPIM0::EVENTS_ENDTX"; };
template<> struct address_map< 0x40003124 > { static constexpr const char * name_str = "TWI0::EVENTS_ERROR"; };  /* svd2hpp: duplicate address for: TWI0::EVENTS_ERROR, TWIM0::EVENTS_ERROR, TWIS0::EVENTS_ERROR */
template<> struct address_map< 0x40003128 > { static constexpr const char * name_str = "SPIS0::EVENTS_ACQUIRED"; };
template<> struct address_map< 0x40003138 > { static constexpr const char * name_str = "TWI0::EVENTS_BB"; };
template<> struct address_map< 0x40003148 > { static constexpr const char * name_str = "TWI0::EVENTS_SUSPENDED"; };
template<> struct address_map< 0x4000314c > { static constexpr const char * name_str = "SPIM0::EVENTS_STARTED"; };  /* svd2hpp: duplicate address for: SPIM0::EVENTS_STARTED, TWIM0::EVENTS_RXSTARTED, TWIS0::EVENTS_RXSTARTED */
template<> struct address_map< 0x40003150 > { static constexpr const char * name_str = "TWIS0::EVENTS_TXSTARTED"; };  /* svd2hpp: duplicate address for: TWIM0::EVENTS_TXSTARTED, TWIS0::EVENTS_TXSTARTED */
template<> struct address_map< 0x4000315c > { static constexpr const char * name_str = "TWIM0::EVENTS_LASTRX"; };
template<> struct address_map< 0x40003160 > { static constexpr const char * name_str = "TWIM0::EVENTS_LASTTX"; };
template<> struct address_map< 0x40003164 > { static constexpr const char * name_str = "TWIS0::EVENTS_WRITE"; };
template<> struct address_map< 0x40003168 > { static constexpr const char * name_str = "TWIS0::EVENTS_READ"; };
template<> struct address_map< 0x40003200 > { static constexpr const char * name_str = "TWI0::SHORTS"; };  /* svd2hpp: duplicate address for: SPIM0::SHORTS, SPIS0::SHORTS, TWI0::SHORTS, TWIM0::SHORTS, TWIS0::SHORTS */
template<> struct address_map< 0x40003300 > { static constexpr const char * name_str = "TWIS0::INTEN"; };  /* svd2hpp: duplicate address for: TWIM0::INTEN, TWIS0::INTEN */
template<> struct address_map< 0x40003304 > { static constexpr const char * name_str = "TWI0::INTENSET"; };  /* svd2hpp: duplicate address for: SPI0::INTENSET, SPIM0::INTENSET, SPIS0::INTENSET, TWI0::INTENSET, TWIM0::INTENSET, TWIS0::INTENSET */
template<> struct address_map< 0x40003308 > { static constexpr const char * name_str = "TWI0::INTENCLR"; };  /* svd2hpp: duplicate address for: SPI0::INTENCLR, SPIM0::INTENCLR, SPIS0::INTENCLR, TWI0::INTENCLR, TWIM0::INTENCLR, TWIS0::INTENCLR */
template<> struct address_map< 0x40003400 > { static constexpr const char * name_str = "SPIS0::SEMSTAT"; };
template<> struct address_map< 0x40003440 > { static constexpr const char * name_str = "SPIS0::STATUS"; };
template<> struct address_map< 0x400034c4 > { static constexpr const char * name_str = "TWI0::ERRORSRC"; };  /* svd2hpp: duplicate address for: TWI0::ERRORSRC, TWIM0::ERRORSRC */
template<> struct address_map< 0x400034d0 > { static constexpr const char * name_str = "TWIS0::ERRORSRC"; };
template<> struct address_map< 0x400034d4 > { static constexpr const char * name_str = "TWIS0::MATCH"; };
template<> struct address_map< 0x40003500 > { static constexpr const char * name_str = "TWI0::ENABLE"; };  /* svd2hpp: duplicate address for: SPI0::ENABLE, SPIM0::ENABLE, SPIS0::ENABLE, TWI0::ENABLE, TWIM0::ENABLE, TWIS0::ENABLE */
template<> struct address_map< 0x40003508 > { static constexpr const char * name_str = "TWI0::PSELSCL"; };
template<> struct address_map< 0x4000350c > { static constexpr const char * name_str = "TWI0::PSELSDA"; };
template<> struct address_map< 0x40003518 > { static constexpr const char * name_str = "TWI0::RXD"; };  /* svd2hpp: duplicate address for: SPI0::RXD, TWI0::RXD */
template<> struct address_map< 0x4000351c > { static constexpr const char * name_str = "TWI0::TXD"; };  /* svd2hpp: duplicate address for: SPI0::TXD, TWI0::TXD */
template<> struct address_map< 0x40003524 > { static constexpr const char * name_str = "TWI0::FREQUENCY"; };  /* svd2hpp: duplicate address for: SPI0::FREQUENCY, SPIM0::FREQUENCY, TWI0::FREQUENCY, TWIM0::FREQUENCY */
template<> struct address_map< 0x40003554 > { static constexpr const char * name_str = "SPI0::CONFIG"; };  /* svd2hpp: duplicate address for: SPI0::CONFIG, SPIM0::CONFIG, SPIS0::CONFIG */
template<> struct address_map< 0x4000355c > { static constexpr const char * name_str = "SPIS0::DEF"; };
template<> struct address_map< 0x40003588 > { static constexpr const char * name_str = "TWI0::ADDRESS"; };  /* svd2hpp: duplicate address for: TWI0::ADDRESS, TWIM0::ADDRESS, TWIS0::ADDRESS[%s] */
template<> struct address_map< 0x40003594 > { static constexpr const char * name_str = "TWIS0::CONFIG"; };
template<> struct address_map< 0x400035c0 > { static constexpr const char * name_str = "TWIS0::ORC"; };  /* svd2hpp: duplicate address for: SPIM0::ORC, SPIS0::ORC, TWIS0::ORC */
template<> struct address_map< 0x40004000 > { static constexpr const char * name_str = "TWI1::TASKS_STARTRX"; };  /* svd2hpp: duplicate address for: TWI1::TASKS_STARTRX, TWIM1::TASKS_STARTRX */
template<> struct address_map< 0x40004008 > { static constexpr const char * name_str = "TWI1::TASKS_STARTTX"; };  /* svd2hpp: duplicate address for: TWI1::TASKS_STARTTX, TWIM1::TASKS_STARTTX */
template<> struct address_map< 0x40004010 > { static constexpr const char * name_str = "SPIM1::TASKS_START"; };
template<> struct address_map< 0x40004014 > { static constexpr const char * name_str = "TWI1::TASKS_STOP"; };  /* svd2hpp: duplicate address for: SPIM1::TASKS_STOP, TWI1::TASKS_STOP, TWIM1::TASKS_STOP, TWIS1::TASKS_STOP */
template<> struct address_map< 0x4000401c > { static constexpr const char * name_str = "TWI1::TASKS_SUSPEND"; };  /* svd2hpp: duplicate address for: SPIM1::TASKS_SUSPEND, TWI1::TASKS_SUSPEND, TWIM1::TASKS_SUSPEND, TWIS1::TASKS_SUSPEND */
template<> struct address_map< 0x40004020 > { static constexpr const char * name_str = "TWI1::TASKS_RESUME"; };  /* svd2hpp: duplicate address for: SPIM1::TASKS_RESUME, TWI1::TASKS_RESUME, TWIM1::TASKS_RESUME, TWIS1::TASKS_RESUME */
template<> struct address_map< 0x40004024 > { static constexpr const char * name_str = "SPIS1::TASKS_ACQUIRE"; };
template<> struct address_map< 0x40004028 > { static constexpr const char * name_str = "SPIS1::TASKS_RELEASE"; };
template<> struct address_map< 0x40004030 > { static constexpr const char * name_str = "TWIS1::TASKS_PREPARERX"; };
template<> struct address_map< 0x40004034 > { static constexpr const char * name_str = "TWIS1::TASKS_PREPARETX"; };
template<> struct address_map< 0x40004104 > { static constexpr const char * name_str = "SPIS1::EVENTS_END"; };  /* svd2hpp: duplicate address for: SPIM1::EVENTS_STOPPED, SPIS1::EVENTS_END, TWI1::EVENTS_STOPPED, TWIM1::EVENTS_STOPPED, TWIS1::EVENTS_STOPPED */
template<> struct address_map< 0x40004108 > { static constexpr const char * name_str = "SPI1::EVENTS_READY"; };  /* svd2hpp: duplicate address for: SPI1::EVENTS_READY, TWI1::EVENTS_RXDREADY */
template<> struct address_map< 0x40004110 > { static constexpr const char * name_str = "SPIM1::EVENTS_ENDRX"; };
template<> struct address_map< 0x40004118 > { static constexpr const char * name_str = "SPIM1::EVENTS_END"; };
template<> struct address_map< 0x4000411c > { static constexpr const char * name_str = "TWI1::EVENTS_TXDSENT"; };
template<> struct address_map< 0x40004120 > { static constexpr const char * name_str = "SPIM1::EVENTS_ENDTX"; };
template<> struct address_map< 0x40004124 > { static constexpr const char * name_str = "TWI1::EVENTS_ERROR"; };  /* svd2hpp: duplicate address for: TWI1::EVENTS_ERROR, TWIM1::EVENTS_ERROR, TWIS1::EVENTS_ERROR */
template<> struct address_map< 0x40004128 > { static constexpr const char * name_str = "SPIS1::EVENTS_ACQUIRED"; };
template<> struct address_map< 0x40004138 > { static constexpr const char * name_str = "TWI1::EVENTS_BB"; };
template<> struct address_map< 0x40004148 > { static constexpr const char * name_str = "TWI1::EVENTS_SUSPENDED"; };
template<> struct address_map< 0x4000414c > { static constexpr const char * name_str = "SPIM1::EVENTS_STARTED"; };  /* svd2hpp: duplicate address for: SPIM1::EVENTS_STARTED, TWIM1::EVENTS_RXSTARTED, TWIS1::EVENTS_RXSTARTED */
template<> struct address_map< 0x40004150 > { static constexpr const char * name_str = "TWIS1::EVENTS_TXSTARTED"; };  /* svd2hpp: duplicate address for: TWIM1::EVENTS_TXSTARTED, TWIS1::EVENTS_TXSTARTED */
template<> struct address_map< 0x4000415c > { static constexpr const char * name_str = "TWIM1::EVENTS_LASTRX"; };
template<> struct address_map< 0x40004160 > { static constexpr const char * name_str = "TWIM1::EVENTS_LASTTX"; };
template<> struct address_map< 0x40004164 > { static constexpr const char * name_str = "TWIS1::EVENTS_WRITE"; };
template<> struct address_map< 0x40004168 > { static constexpr const char * name_str = "TWIS1::EVENTS_READ"; };
template<> struct address_map< 0x40004200 > { static constexpr const char * name_str = "TWI1::SHORTS"; };  /* svd2hpp: duplicate address for: SPIM1::SHORTS, SPIS1::SHORTS, TWI1::SHORTS, TWIM1::SHORTS, TWIS1::SHORTS */
template<> struct address_map< 0x40004300 > { static constexpr const char * name_str = "TWIS1::INTEN"; };  /* svd2hpp: duplicate address for: TWIM1::INTEN, TWIS1::INTEN */
template<> struct address_map< 0x40004304 > { static constexpr const char * name_str = "TWI1::INTENSET"; };  /* svd2hpp: duplicate address for: SPI1::INTENSET, SPIM1::INTENSET, SPIS1::INTENSET, TWI1::INTENSET, TWIM1::INTENSET, TWIS1::INTENSET */
template<> struct address_map< 0x40004308 > { static constexpr const char * name_str = "TWI1::INTENCLR"; };  /* svd2hpp: duplicate address for: SPI1::INTENCLR, SPIM1::INTENCLR, SPIS1::INTENCLR, TWI1::INTENCLR, TWIM1::INTENCLR, TWIS1::INTENCLR */
template<> struct address_map< 0x40004400 > { static constexpr const char * name_str = "SPIS1::SEMSTAT"; };
template<> struct address_map< 0x40004440 > { static constexpr const char * name_str = "SPIS1::STATUS"; };
template<> struct address_map< 0x400044c4 > { static constexpr const char * name_str = "TWI1::ERRORSRC"; };  /* svd2hpp: duplicate address for: TWI1::ERRORSRC, TWIM1::ERRORSRC */
template<> struct address_map< 0x400044d0 > { static constexpr const char * name_str = "TWIS1::ERRORSRC"; };
template<> struct address_map< 0x400044d4 > { static constexpr const char * name_str = "TWIS1::MATCH"; };
template<> struct address_map< 0x40004500 > { static constexpr const char * name_str = "TWI1::ENABLE"; };  /* svd2hpp: duplicate address for: SPI1::ENABLE, SPIM1::ENABLE, SPIS1::ENABLE, TWI1::ENABLE, TWIM1::ENABLE, TWIS1::ENABLE */
template<> struct address_map< 0x40004508 > { static constexpr const char * name_str = "TWI1::PSELSCL"; };
template<> struct address_map< 0x4000450c > { static constexpr const char * name_str = "TWI1::PSELSDA"; };
template<> struct address_map< 0x40004518 > { static constexpr const char * name_str = "TWI1::RXD"; };  /* svd2hpp: duplicate address for: SPI1::RXD, TWI1::RXD */
template<> struct address_map< 0x4000451c > { static constexpr const char * name_str = "TWI1::TXD"; };  /* svd2hpp: duplicate address for: SPI1::TXD, TWI1::TXD */
template<> struct address_map< 0x40004524 > { static constexpr const char * name_str = "TWI1::FREQUENCY"; };  /* svd2hpp: duplicate address for: SPI1::FREQUENCY, SPIM1::FREQUENCY, TWI1::FREQUENCY, TWIM1::FREQUENCY */
template<> struct address_map< 0x40004554 > { static constexpr const char * name_str = "SPI1::CONFIG"; };  /* svd2hpp: duplicate address for: SPI1::CONFIG, SPIM1::CONFIG, SPIS1::CONFIG */
template<> struct address_map< 0x4000455c > { static constexpr const char * name_str = "SPIS1::DEF"; };
template<> struct address_map< 0x40004588 > { static constexpr const char * name_str = "TWI1::ADDRESS"; };  /* svd2hpp: duplicate address for: TWI1::ADDRESS, TWIM1::ADDRESS, TWIS1::ADDRESS[%s] */
template<> struct address_map< 0x40004594 > { static constexpr const char * name_str = "TWIS1::CONFIG"; };
template<> struct address_map< 0x400045c0 > { static constexpr const char * name_str = "TWIS1::ORC"; };  /* svd2hpp: duplicate address for: SPIM1::ORC, SPIS1::ORC, TWIS1::ORC */
template<> struct address_map< 0x40005000 > { static constexpr const char * name_str = "NFCT::TASKS_ACTIVATE"; };
template<> struct address_map< 0x40005004 > { static constexpr const char * name_str = "NFCT::TASKS_DISABLE"; };
template<> struct address_map< 0x40005008 > { static constexpr const char * name_str = "NFCT::TASKS_SENSE"; };
template<> struct address_map< 0x4000500c > { static constexpr const char * name_str = "NFCT::TASKS_STARTTX"; };
template<> struct address_map< 0x4000501c > { static constexpr const char * name_str = "NFCT::TASKS_ENABLERXDATA"; };
template<> struct address_map< 0x40005024 > { static constexpr const char * name_str = "NFCT::TASKS_GOIDLE"; };
template<> struct address_map< 0x40005028 > { static constexpr const char * name_str = "NFCT::TASKS_GOSLEEP"; };
template<> struct address_map< 0x40005100 > { static constexpr const char * name_str = "NFCT::EVENTS_READY"; };
template<> struct address_map< 0x40005104 > { static constexpr const char * name_str = "NFCT::EVENTS_FIELDDETECTED"; };
template<> struct address_map< 0x40005108 > { static constexpr const char * name_str = "NFCT::EVENTS_FIELDLOST"; };
template<> struct address_map< 0x4000510c > { static constexpr const char * name_str = "NFCT::EVENTS_TXFRAMESTART"; };
template<> struct address_map< 0x40005110 > { static constexpr const char * name_str = "NFCT::EVENTS_TXFRAMEEND"; };
template<> struct address_map< 0x40005114 > { static constexpr const char * name_str = "NFCT::EVENTS_RXFRAMESTART"; };
template<> struct address_map< 0x40005118 > { static constexpr const char * name_str = "NFCT::EVENTS_RXFRAMEEND"; };
template<> struct address_map< 0x4000511c > { static constexpr const char * name_str = "NFCT::EVENTS_ERROR"; };
template<> struct address_map< 0x40005128 > { static constexpr const char * name_str = "NFCT::EVENTS_RXERROR"; };
template<> struct address_map< 0x4000512c > { static constexpr const char * name_str = "NFCT::EVENTS_ENDRX"; };
template<> struct address_map< 0x40005130 > { static constexpr const char * name_str = "NFCT::EVENTS_ENDTX"; };
template<> struct address_map< 0x40005138 > { static constexpr const char * name_str = "NFCT::EVENTS_AUTOCOLRESSTARTED"; };
template<> struct address_map< 0x40005148 > { static constexpr const char * name_str = "NFCT::EVENTS_COLLISION"; };
template<> struct address_map< 0x4000514c > { static constexpr const char * name_str = "NFCT::EVENTS_SELECTED"; };
template<> struct address_map< 0x40005150 > { static constexpr const char * name_str = "NFCT::EVENTS_STARTED"; };
template<> struct address_map< 0x40005200 > { static constexpr const char * name_str = "NFCT::SHORTS"; };
template<> struct address_map< 0x40005300 > { static constexpr const char * name_str = "NFCT::INTEN"; };
template<> struct address_map< 0x40005304 > { static constexpr const char * name_str = "NFCT::INTENSET"; };
template<> struct address_map< 0x40005308 > { static constexpr const char * name_str = "NFCT::INTENCLR"; };
template<> struct address_map< 0x40005404 > { static constexpr const char * name_str = "NFCT::ERRORSTATUS"; };
template<> struct address_map< 0x40005430 > { static constexpr const char * name_str = "NFCT::CURRENTLOADCTRL"; };
template<> struct address_map< 0x4000543c > { static constexpr const char * name_str = "NFCT::FIELDPRESENT"; };
template<> struct address_map< 0x40005504 > { static constexpr const char * name_str = "NFCT::FRAMEDELAYMIN"; };
template<> struct address_map< 0x40005508 > { static constexpr const char * name_str = "NFCT::FRAMEDELAYMAX"; };
template<> struct address_map< 0x4000550c > { static constexpr const char * name_str = "NFCT::FRAMEDELAYMODE"; };
template<> struct address_map< 0x40005510 > { static constexpr const char * name_str = "NFCT::PACKETPTR"; };
template<> struct address_map< 0x40005514 > { static constexpr const char * name_str = "NFCT::MAXLEN"; };
template<> struct address_map< 0x40005590 > { static constexpr const char * name_str = "NFCT::NFCID1_LAST"; };
template<> struct address_map< 0x40005594 > { static constexpr const char * name_str = "NFCT::NFCID1_2ND_LAST"; };
template<> struct address_map< 0x40005598 > { static constexpr const char * name_str = "NFCT::NFCID1_3RD_LAST"; };
template<> struct address_map< 0x4000559c > { static constexpr const char * name_str = "NFCT::AUTOCOLRESCONFIG"; };
template<> struct address_map< 0x400055a0 > { static constexpr const char * name_str = "NFCT::SENSRES"; };
template<> struct address_map< 0x400055a4 > { static constexpr const char * name_str = "NFCT::SELRES"; };
template<> struct address_map< 0x40006000 > { static constexpr const char * name_str = "GPIOTE::TASKS_OUT[%s]"; };
template<> struct address_map< 0x40006030 > { static constexpr const char * name_str = "GPIOTE::TASKS_SET[%s]"; };
template<> struct address_map< 0x40006060 > { static constexpr const char * name_str = "GPIOTE::TASKS_CLR[%s]"; };
template<> struct address_map< 0x40006100 > { static constexpr const char * name_str = "GPIOTE::EVENTS_IN[%s]"; };
template<> struct address_map< 0x4000617c > { static constexpr const char * name_str = "GPIOTE::EVENTS_PORT"; };
template<> struct address_map< 0x40006304 > { static constexpr const char * name_str = "GPIOTE::INTENSET"; };
template<> struct address_map< 0x40006308 > { static constexpr const char * name_str = "GPIOTE::INTENCLR"; };
template<> struct address_map< 0x40006510 > { static constexpr const char * name_str = "GPIOTE::CONFIG[%s]"; };
template<> struct address_map< 0x40007000 > { static constexpr const char * name_str = "SAADC::TASKS_START"; };
template<> struct address_map< 0x40007004 > { static constexpr const char * name_str = "SAADC::TASKS_SAMPLE"; };
template<> struct address_map< 0x40007008 > { static constexpr const char * name_str = "SAADC::TASKS_STOP"; };
template<> struct address_map< 0x4000700c > { static constexpr const char * name_str = "SAADC::TASKS_CALIBRATEOFFSET"; };
template<> struct address_map< 0x40007100 > { static constexpr const char * name_str = "SAADC::EVENTS_STARTED"; };
template<> struct address_map< 0x40007104 > { static constexpr const char * name_str = "SAADC::EVENTS_END"; };
template<> struct address_map< 0x40007108 > { static constexpr const char * name_str = "SAADC::EVENTS_DONE"; };
template<> struct address_map< 0x4000710c > { static constexpr const char * name_str = "SAADC::EVENTS_RESULTDONE"; };
template<> struct address_map< 0x40007110 > { static constexpr const char * name_str = "SAADC::EVENTS_CALIBRATEDONE"; };
template<> struct address_map< 0x40007114 > { static constexpr const char * name_str = "SAADC::EVENTS_STOPPED"; };
template<> struct address_map< 0x40007300 > { static constexpr const char * name_str = "SAADC::INTEN"; };
template<> struct address_map< 0x40007304 > { static constexpr const char * name_str = "SAADC::INTENSET"; };
template<> struct address_map< 0x40007308 > { static constexpr const char * name_str = "SAADC::INTENCLR"; };
template<> struct address_map< 0x40007400 > { static constexpr const char * name_str = "SAADC::STATUS"; };
template<> struct address_map< 0x40007500 > { static constexpr const char * name_str = "SAADC::ENABLE"; };
template<> struct address_map< 0x400075f0 > { static constexpr const char * name_str = "SAADC::RESOLUTION"; };
template<> struct address_map< 0x400075f4 > { static constexpr const char * name_str = "SAADC::OVERSAMPLE"; };
template<> struct address_map< 0x400075f8 > { static constexpr const char * name_str = "SAADC::SAMPLERATE"; };
template<> struct address_map< 0x40008000 > { static constexpr const char * name_str = "TIMER0::TASKS_START"; };
template<> struct address_map< 0x40008004 > { static constexpr const char * name_str = "TIMER0::TASKS_STOP"; };
template<> struct address_map< 0x40008008 > { static constexpr const char * name_str = "TIMER0::TASKS_COUNT"; };
template<> struct address_map< 0x4000800c > { static constexpr const char * name_str = "TIMER0::TASKS_CLEAR"; };
template<> struct address_map< 0x40008010 > { static constexpr const char * name_str = "TIMER0::TASKS_SHUTDOWN"; };
template<> struct address_map< 0x40008040 > { static constexpr const char * name_str = "TIMER0::TASKS_CAPTURE[%s]"; };
template<> struct address_map< 0x40008140 > { static constexpr const char * name_str = "TIMER0::EVENTS_COMPARE[%s]"; };
template<> struct address_map< 0x40008200 > { static constexpr const char * name_str = "TIMER0::SHORTS"; };
template<> struct address_map< 0x40008304 > { static constexpr const char * name_str = "TIMER0::INTENSET"; };
template<> struct address_map< 0x40008308 > { static constexpr const char * name_str = "TIMER0::INTENCLR"; };
template<> struct address_map< 0x40008504 > { static constexpr const char * name_str = "TIMER0::MODE"; };
template<> struct address_map< 0x40008508 > { static constexpr const char * name_str = "TIMER0::BITMODE"; };
template<> struct address_map< 0x40008510 > { static constexpr const char * name_str = "TIMER0::PRESCALER"; };
template<> struct address_map< 0x40008540 > { static constexpr const char * name_str = "TIMER0::CC[%s]"; };
template<> struct address_map< 0x40009000 > { static constexpr const char * name_str = "TIMER1::TASKS_START"; };
template<> struct address_map< 0x40009004 > { static constexpr const char * name_str = "TIMER1::TASKS_STOP"; };
template<> struct address_map< 0x40009008 > { static constexpr const char * name_str = "TIMER1::TASKS_COUNT"; };
template<> struct address_map< 0x4000900c > { static constexpr const char * name_str = "TIMER1::TASKS_CLEAR"; };
template<> struct address_map< 0x40009010 > { static constexpr const char * name_str = "TIMER1::TASKS_SHUTDOWN"; };
template<> struct address_map< 0x40009040 > { static constexpr const char * name_str = "TIMER1::TASKS_CAPTURE[%s]"; };
template<> struct address_map< 0x40009140 > { static constexpr const char * name_str = "TIMER1::EVENTS_COMPARE[%s]"; };
template<> struct address_map< 0x40009200 > { static constexpr const char * name_str = "TIMER1::SHORTS"; };
template<> struct address_map< 0x40009304 > { static constexpr const char * name_str = "TIMER1::INTENSET"; };
template<> struct address_map< 0x40009308 > { static constexpr const char * name_str = "TIMER1::INTENCLR"; };
template<> struct address_map< 0x40009504 > { static constexpr const char * name_str = "TIMER1::MODE"; };
template<> struct address_map< 0x40009508 > { static constexpr const char * name_str = "TIMER1::BITMODE"; };
template<> struct address_map< 0x40009510 > { static constexpr const char * name_str = "TIMER1::PRESCALER"; };
template<> struct address_map< 0x40009540 > { static constexpr const char * name_str = "TIMER1::CC[%s]"; };
template<> struct address_map< 0x4000a000 > { static constexpr const char * name_str = "TIMER2::TASKS_START"; };
template<> struct address_map< 0x4000a004 > { static constexpr const char * name_str = "TIMER2::TASKS_STOP"; };
template<> struct address_map< 0x4000a008 > { static constexpr const char * name_str = "TIMER2::TASKS_COUNT"; };
template<> struct address_map< 0x4000a00c > { static constexpr const char * name_str = "TIMER2::TASKS_CLEAR"; };
template<> struct address_map< 0x4000a010 > { static constexpr const char * name_str = "TIMER2::TASKS_SHUTDOWN"; };
template<> struct address_map< 0x4000a040 > { static constexpr const char * name_str = "TIMER2::TASKS_CAPTURE[%s]"; };
template<> struct address_map< 0x4000a140 > { static constexpr const char * name_str = "TIMER2::EVENTS_COMPARE[%s]"; };
template<> struct address_map< 0x4000a200 > { static constexpr const char * name_str = "TIMER2::SHORTS"; };
template<> struct address_map< 0x4000a304 > { static constexpr const char * name_str = "TIMER2::INTENSET"; };
template<> struct address_map< 0x4000a308 > { static constexpr const char * name_str = "TIMER2::INTENCLR"; };
template<> struct address_map< 0x4000a504 > { static constexpr const char * name_str = "TIMER2::MODE"; };
template<> struct address_map< 0x4000a508 > { static constexpr const char * name_str = "TIMER2::BITMODE"; };
template<> struct address_map< 0x4000a510 > { static constexpr const char * name_str = "TIMER2::PRESCALER"; };
template<> struct address_map< 0x4000a540 > { static constexpr const char * name_str = "TIMER2::CC[%s]"; };
template<> struct address_map< 0x4000b000 > { static constexpr const char * name_str = "RTC0::TASKS_START"; };
template<> struct address_map< 0x4000b004 > { static constexpr const char * name_str = "RTC0::TASKS_STOP"; };
template<> struct address_map< 0x4000b008 > { static constexpr const char * name_str = "RTC0::TASKS_CLEAR"; };
template<> struct address_map< 0x4000b00c > { static constexpr const char * name_str = "RTC0::TASKS_TRIGOVRFLW"; };
template<> struct address_map< 0x4000b100 > { static constexpr const char * name_str = "RTC0::EVENTS_TICK"; };
template<> struct address_map< 0x4000b104 > { static constexpr const char * name_str = "RTC0::EVENTS_OVRFLW"; };
template<> struct address_map< 0x4000b140 > { static constexpr const char * name_str = "RTC0::EVENTS_COMPARE[%s]"; };
template<> struct address_map< 0x4000b304 > { static constexpr const char * name_str = "RTC0::INTENSET"; };
template<> struct address_map< 0x4000b308 > { static constexpr const char * name_str = "RTC0::INTENCLR"; };
template<> struct address_map< 0x4000b340 > { static constexpr const char * name_str = "RTC0::EVTEN"; };
template<> struct address_map< 0x4000b344 > { static constexpr const char * name_str = "RTC0::EVTENSET"; };
template<> struct address_map< 0x4000b348 > { static constexpr const char * name_str = "RTC0::EVTENCLR"; };
template<> struct address_map< 0x4000b504 > { static constexpr const char * name_str = "RTC0::COUNTER"; };
template<> struct address_map< 0x4000b508 > { static constexpr const char * name_str = "RTC0::PRESCALER"; };
template<> struct address_map< 0x4000b540 > { static constexpr const char * name_str = "RTC0::CC[%s]"; };
template<> struct address_map< 0x4000c000 > { static constexpr const char * name_str = "TEMP::TASKS_START"; };
template<> struct address_map< 0x4000c004 > { static constexpr const char * name_str = "TEMP::TASKS_STOP"; };
template<> struct address_map< 0x4000c100 > { static constexpr const char * name_str = "TEMP::EVENTS_DATARDY"; };
template<> struct address_map< 0x4000c304 > { static constexpr const char * name_str = "TEMP::INTENSET"; };
template<> struct address_map< 0x4000c308 > { static constexpr const char * name_str = "TEMP::INTENCLR"; };
template<> struct address_map< 0x4000c508 > { static constexpr const char * name_str = "TEMP::TEMP"; };
template<> struct address_map< 0x4000d000 > { static constexpr const char * name_str = "RNG::TASKS_START"; };
template<> struct address_map< 0x4000d004 > { static constexpr const char * name_str = "RNG::TASKS_STOP"; };
template<> struct address_map< 0x4000d100 > { static constexpr const char * name_str = "RNG::EVENTS_VALRDY"; };
template<> struct address_map< 0x4000d200 > { static constexpr const char * name_str = "RNG::SHORTS"; };
template<> struct address_map< 0x4000d304 > { static constexpr const char * name_str = "RNG::INTENSET"; };
template<> struct address_map< 0x4000d308 > { static constexpr const char * name_str = "RNG::INTENCLR"; };
template<> struct address_map< 0x4000d504 > { static constexpr const char * name_str = "RNG::CONFIG"; };
template<> struct address_map< 0x4000d508 > { static constexpr const char * name_str = "RNG::VALUE"; };
template<> struct address_map< 0x4000e000 > { static constexpr const char * name_str = "ECB::TASKS_STARTECB"; };
template<> struct address_map< 0x4000e004 > { static constexpr const char * name_str = "ECB::TASKS_STOPECB"; };
template<> struct address_map< 0x4000e100 > { static constexpr const char * name_str = "ECB::EVENTS_ENDECB"; };
template<> struct address_map< 0x4000e104 > { static constexpr const char * name_str = "ECB::EVENTS_ERRORECB"; };
template<> struct address_map< 0x4000e304 > { static constexpr const char * name_str = "ECB::INTENSET"; };
template<> struct address_map< 0x4000e308 > { static constexpr const char * name_str = "ECB::INTENCLR"; };
template<> struct address_map< 0x4000e504 > { static constexpr const char * name_str = "ECB::ECBDATAPTR"; };
template<> struct address_map< 0x4000f000 > { static constexpr const char * name_str = "AAR::TASKS_START"; };  /* svd2hpp: duplicate address for: AAR::TASKS_START, CCM::TASKS_KSGEN */
template<> struct address_map< 0x4000f004 > { static constexpr const char * name_str = "CCM::TASKS_CRYPT"; };
template<> struct address_map< 0x4000f008 > { static constexpr const char * name_str = "AAR::TASKS_STOP"; };  /* svd2hpp: duplicate address for: AAR::TASKS_STOP, CCM::TASKS_STOP */
template<> struct address_map< 0x4000f100 > { static constexpr const char * name_str = "AAR::EVENTS_END"; };  /* svd2hpp: duplicate address for: AAR::EVENTS_END, CCM::EVENTS_ENDKSGEN */
template<> struct address_map< 0x4000f104 > { static constexpr const char * name_str = "AAR::EVENTS_RESOLVED"; };  /* svd2hpp: duplicate address for: AAR::EVENTS_RESOLVED, CCM::EVENTS_ENDCRYPT */
template<> struct address_map< 0x4000f108 > { static constexpr const char * name_str = "CCM::EVENTS_ERROR"; };  /* svd2hpp: duplicate address for: AAR::EVENTS_NOTRESOLVED, CCM::EVENTS_ERROR */
template<> struct address_map< 0x4000f200 > { static constexpr const char * name_str = "CCM::SHORTS"; };
template<> struct address_map< 0x4000f304 > { static constexpr const char * name_str = "AAR::INTENSET"; };  /* svd2hpp: duplicate address for: AAR::INTENSET, CCM::INTENSET */
template<> struct address_map< 0x4000f308 > { static constexpr const char * name_str = "AAR::INTENCLR"; };  /* svd2hpp: duplicate address for: AAR::INTENCLR, CCM::INTENCLR */
template<> struct address_map< 0x4000f400 > { static constexpr const char * name_str = "AAR::STATUS"; };  /* svd2hpp: duplicate address for: AAR::STATUS, CCM::MICSTATUS */
template<> struct address_map< 0x4000f500 > { static constexpr const char * name_str = "AAR::ENABLE"; };  /* svd2hpp: duplicate address for: AAR::ENABLE, CCM::ENABLE */
template<> struct address_map< 0x4000f504 > { static constexpr const char * name_str = "AAR::NIRK"; };  /* svd2hpp: duplicate address for: AAR::NIRK, CCM::MODE */
template<> struct address_map< 0x4000f508 > { static constexpr const char * name_str = "AAR::IRKPTR"; };  /* svd2hpp: duplicate address for: AAR::IRKPTR, CCM::CNFPTR */
template<> struct address_map< 0x4000f50c > { static constexpr const char * name_str = "CCM::INPTR"; };
template<> struct address_map< 0x4000f510 > { static constexpr const char * name_str = "CCM::OUTPTR"; };  /* svd2hpp: duplicate address for: AAR::ADDRPTR, CCM::OUTPTR */
template<> struct address_map< 0x4000f514 > { static constexpr const char * name_str = "AAR::SCRATCHPTR"; };  /* svd2hpp: duplicate address for: AAR::SCRATCHPTR, CCM::SCRATCHPTR */
template<> struct address_map< 0x40010000 > { static constexpr const char * name_str = "WDT::TASKS_START"; };
template<> struct address_map< 0x40010100 > { static constexpr const char * name_str = "WDT::EVENTS_TIMEOUT"; };
template<> struct address_map< 0x40010304 > { static constexpr const char * name_str = "WDT::INTENSET"; };
template<> struct address_map< 0x40010308 > { static constexpr const char * name_str = "WDT::INTENCLR"; };
template<> struct address_map< 0x40010400 > { static constexpr const char * name_str = "WDT::RUNSTATUS"; };
template<> struct address_map< 0x40010404 > { static constexpr const char * name_str = "WDT::REQSTATUS"; };
template<> struct address_map< 0x40010504 > { static constexpr const char * name_str = "WDT::CRV"; };
template<> struct address_map< 0x40010508 > { static constexpr const char * name_str = "WDT::RREN"; };
template<> struct address_map< 0x4001050c > { static constexpr const char * name_str = "WDT::CONFIG"; };
template<> struct address_map< 0x40010600 > { static constexpr const char * name_str = "WDT::RR[%s]"; };
template<> struct address_map< 0x40011000 > { static constexpr const char * name_str = "RTC1::TASKS_START"; };
template<> struct address_map< 0x40011004 > { static constexpr const char * name_str = "RTC1::TASKS_STOP"; };
template<> struct address_map< 0x40011008 > { static constexpr const char * name_str = "RTC1::TASKS_CLEAR"; };
template<> struct address_map< 0x4001100c > { static constexpr const char * name_str = "RTC1::TASKS_TRIGOVRFLW"; };
template<> struct address_map< 0x40011100 > { static constexpr const char * name_str = "RTC1::EVENTS_TICK"; };
template<> struct address_map< 0x40011104 > { static constexpr const char * name_str = "RTC1::EVENTS_OVRFLW"; };
template<> struct address_map< 0x40011140 > { static constexpr const char * name_str = "RTC1::EVENTS_COMPARE[%s]"; };
template<> struct address_map< 0x40011304 > { static constexpr const char * name_str = "RTC1::INTENSET"; };
template<> struct address_map< 0x40011308 > { static constexpr const char * name_str = "RTC1::INTENCLR"; };
template<> struct address_map< 0x40011340 > { static constexpr const char * name_str = "RTC1::EVTEN"; };
template<> struct address_map< 0x40011344 > { static constexpr const char * name_str = "RTC1::EVTENSET"; };
template<> struct address_map< 0x40011348 > { static constexpr const char * name_str = "RTC1::EVTENCLR"; };
template<> struct address_map< 0x40011504 > { static constexpr const char * name_str = "RTC1::COUNTER"; };
template<> struct address_map< 0x40011508 > { static constexpr const char * name_str = "RTC1::PRESCALER"; };
template<> struct address_map< 0x40011540 > { static constexpr const char * name_str = "RTC1::CC[%s]"; };
template<> struct address_map< 0x40012000 > { static constexpr const char * name_str = "QDEC::TASKS_START"; };
template<> struct address_map< 0x40012004 > { static constexpr const char * name_str = "QDEC::TASKS_STOP"; };
template<> struct address_map< 0x40012008 > { static constexpr const char * name_str = "QDEC::TASKS_READCLRACC"; };
template<> struct address_map< 0x4001200c > { static constexpr const char * name_str = "QDEC::TASKS_RDCLRACC"; };
template<> struct address_map< 0x40012010 > { static constexpr const char * name_str = "QDEC::TASKS_RDCLRDBL"; };
template<> struct address_map< 0x40012100 > { static constexpr const char * name_str = "QDEC::EVENTS_SAMPLERDY"; };
template<> struct address_map< 0x40012104 > { static constexpr const char * name_str = "QDEC::EVENTS_REPORTRDY"; };
template<> struct address_map< 0x40012108 > { static constexpr const char * name_str = "QDEC::EVENTS_ACCOF"; };
template<> struct address_map< 0x4001210c > { static constexpr const char * name_str = "QDEC::EVENTS_DBLRDY"; };
template<> struct address_map< 0x40012110 > { static constexpr const char * name_str = "QDEC::EVENTS_STOPPED"; };
template<> struct address_map< 0x40012200 > { static constexpr const char * name_str = "QDEC::SHORTS"; };
template<> struct address_map< 0x40012304 > { static constexpr const char * name_str = "QDEC::INTENSET"; };
template<> struct address_map< 0x40012308 > { static constexpr const char * name_str = "QDEC::INTENCLR"; };
template<> struct address_map< 0x40012500 > { static constexpr const char * name_str = "QDEC::ENABLE"; };
template<> struct address_map< 0x40012504 > { static constexpr const char * name_str = "QDEC::LEDPOL"; };
template<> struct address_map< 0x40012508 > { static constexpr const char * name_str = "QDEC::SAMPLEPER"; };
template<> struct address_map< 0x4001250c > { static constexpr const char * name_str = "QDEC::SAMPLE"; };
template<> struct address_map< 0x40012510 > { static constexpr const char * name_str = "QDEC::REPORTPER"; };
template<> struct address_map< 0x40012514 > { static constexpr const char * name_str = "QDEC::ACC"; };
template<> struct address_map< 0x40012518 > { static constexpr const char * name_str = "QDEC::ACCREAD"; };
template<> struct address_map< 0x40012528 > { static constexpr const char * name_str = "QDEC::DBFEN"; };
template<> struct address_map< 0x40012540 > { static constexpr const char * name_str = "QDEC::LEDPRE"; };
template<> struct address_map< 0x40012544 > { static constexpr const char * name_str = "QDEC::ACCDBL"; };
template<> struct address_map< 0x40012548 > { static constexpr const char * name_str = "QDEC::ACCDBLREAD"; };
template<> struct address_map< 0x40013000 > { static constexpr const char * name_str = "COMP::TASKS_START"; };  /* svd2hpp: duplicate address for: COMP::TASKS_START, LPCOMP::TASKS_START */
template<> struct address_map< 0x40013004 > { static constexpr const char * name_str = "COMP::TASKS_STOP"; };  /* svd2hpp: duplicate address for: COMP::TASKS_STOP, LPCOMP::TASKS_STOP */
template<> struct address_map< 0x40013008 > { static constexpr const char * name_str = "COMP::TASKS_SAMPLE"; };  /* svd2hpp: duplicate address for: COMP::TASKS_SAMPLE, LPCOMP::TASKS_SAMPLE */
template<> struct address_map< 0x40013100 > { static constexpr const char * name_str = "COMP::EVENTS_READY"; };  /* svd2hpp: duplicate address for: COMP::EVENTS_READY, LPCOMP::EVENTS_READY */
template<> struct address_map< 0x40013104 > { static constexpr const char * name_str = "COMP::EVENTS_DOWN"; };  /* svd2hpp: duplicate address for: COMP::EVENTS_DOWN, LPCOMP::EVENTS_DOWN */
template<> struct address_map< 0x40013108 > { static constexpr const char * name_str = "COMP::EVENTS_UP"; };  /* svd2hpp: duplicate address for: COMP::EVENTS_UP, LPCOMP::EVENTS_UP */
template<> struct address_map< 0x4001310c > { static constexpr const char * name_str = "COMP::EVENTS_CROSS"; };  /* svd2hpp: duplicate address for: COMP::EVENTS_CROSS, LPCOMP::EVENTS_CROSS */
template<> struct address_map< 0x40013200 > { static constexpr const char * name_str = "COMP::SHORTS"; };  /* svd2hpp: duplicate address for: COMP::SHORTS, LPCOMP::SHORTS */
template<> struct address_map< 0x40013300 > { static constexpr const char * name_str = "COMP::INTEN"; };
template<> struct address_map< 0x40013304 > { static constexpr const char * name_str = "COMP::INTENSET"; };  /* svd2hpp: duplicate address for: COMP::INTENSET, LPCOMP::INTENSET */
template<> struct address_map< 0x40013308 > { static constexpr const char * name_str = "COMP::INTENCLR"; };  /* svd2hpp: duplicate address for: COMP::INTENCLR, LPCOMP::INTENCLR */
template<> struct address_map< 0x40013400 > { static constexpr const char * name_str = "COMP::RESULT"; };  /* svd2hpp: duplicate address for: COMP::RESULT, LPCOMP::RESULT */
template<> struct address_map< 0x40013500 > { static constexpr const char * name_str = "COMP::ENABLE"; };  /* svd2hpp: duplicate address for: COMP::ENABLE, LPCOMP::ENABLE */
template<> struct address_map< 0x40013504 > { static constexpr const char * name_str = "COMP::PSEL"; };  /* svd2hpp: duplicate address for: COMP::PSEL, LPCOMP::PSEL */
template<> struct address_map< 0x40013508 > { static constexpr const char * name_str = "COMP::REFSEL"; };  /* svd2hpp: duplicate address for: COMP::REFSEL, LPCOMP::REFSEL */
template<> struct address_map< 0x4001350c > { static constexpr const char * name_str = "COMP::EXTREFSEL"; };  /* svd2hpp: duplicate address for: COMP::EXTREFSEL, LPCOMP::EXTREFSEL */
template<> struct address_map< 0x40013520 > { static constexpr const char * name_str = "LPCOMP::ANADETECT"; };
template<> struct address_map< 0x40013530 > { static constexpr const char * name_str = "COMP::TH"; };
template<> struct address_map< 0x40013534 > { static constexpr const char * name_str = "COMP::MODE"; };
template<> struct address_map< 0x40013538 > { static constexpr const char * name_str = "COMP::HYST"; };  /* svd2hpp: duplicate address for: COMP::HYST, LPCOMP::HYST */
template<> struct address_map< 0x4001353c > { static constexpr const char * name_str = "COMP::ISOURCE"; };
template<> struct address_map< 0x40014000 > { static constexpr const char * name_str = "SWI0::UNUSED"; };  /* svd2hpp: duplicate address for: EGU0::TASKS_TRIGGER[%s], SWI0::UNUSED */
template<> struct address_map< 0x40014100 > { static constexpr const char * name_str = "EGU0::EVENTS_TRIGGERED[%s]"; };
template<> struct address_map< 0x40014300 > { static constexpr const char * name_str = "EGU0::INTEN"; };
template<> struct address_map< 0x40014304 > { static constexpr const char * name_str = "EGU0::INTENSET"; };
template<> struct address_map< 0x40014308 > { static constexpr const char * name_str = "EGU0::INTENCLR"; };
template<> struct address_map< 0x40015000 > { static constexpr const char * name_str = "SWI1::UNUSED"; };  /* svd2hpp: duplicate address for: EGU1::TASKS_TRIGGER[%s], SWI1::UNUSED */
template<> struct address_map< 0x40015100 > { static constexpr const char * name_str = "EGU1::EVENTS_TRIGGERED[%s]"; };
template<> struct address_map< 0x40015300 > { static constexpr const char * name_str = "EGU1::INTEN"; };
template<> struct address_map< 0x40015304 > { static constexpr const char * name_str = "EGU1::INTENSET"; };
template<> struct address_map< 0x40015308 > { static constexpr const char * name_str = "EGU1::INTENCLR"; };
template<> struct address_map< 0x40016000 > { static constexpr const char * name_str = "SWI2::UNUSED"; };  /* svd2hpp: duplicate address for: EGU2::TASKS_TRIGGER[%s], SWI2::UNUSED */
template<> struct address_map< 0x40016100 > { static constexpr const char * name_str = "EGU2::EVENTS_TRIGGERED[%s]"; };
template<> struct address_map< 0x40016300 > { static constexpr const char * name_str = "EGU2::INTEN"; };
template<> struct address_map< 0x40016304 > { static constexpr const char * name_str = "EGU2::INTENSET"; };
template<> struct address_map< 0x40016308 > { static constexpr const char * name_str = "EGU2::INTENCLR"; };
template<> struct address_map< 0x40017000 > { static constexpr const char * name_str = "SWI3::UNUSED"; };  /* svd2hpp: duplicate address for: EGU3::TASKS_TRIGGER[%s], SWI3::UNUSED */
template<> struct address_map< 0x40017100 > { static constexpr const char * name_str = "EGU3::EVENTS_TRIGGERED[%s]"; };
template<> struct address_map< 0x40017300 > { static constexpr const char * name_str = "EGU3::INTEN"; };
template<> struct address_map< 0x40017304 > { static constexpr const char * name_str = "EGU3::INTENSET"; };
template<> struct address_map< 0x40017308 > { static constexpr const char * name_str = "EGU3::INTENCLR"; };
template<> struct address_map< 0x40018000 > { static constexpr const char * name_str = "SWI4::UNUSED"; };  /* svd2hpp: duplicate address for: EGU4::TASKS_TRIGGER[%s], SWI4::UNUSED */
template<> struct address_map< 0x40018100 > { static constexpr const char * name_str = "EGU4::EVENTS_TRIGGERED[%s]"; };
template<> struct address_map< 0x40018300 > { static constexpr const char * name_str = "EGU4::INTEN"; };
template<> struct address_map< 0x40018304 > { static constexpr const char * name_str = "EGU4::INTENSET"; };
template<> struct address_map< 0x40018308 > { static constexpr const char * name_str = "EGU4::INTENCLR"; };
template<> struct address_map< 0x40019000 > { static constexpr const char * name_str = "SWI5::UNUSED"; };  /* svd2hpp: duplicate address for: EGU5::TASKS_TRIGGER[%s], SWI5::UNUSED */
template<> struct address_map< 0x40019100 > { static constexpr const char * name_str = "EGU5::EVENTS_TRIGGERED[%s]"; };
template<> struct address_map< 0x40019300 > { static constexpr const char * name_str = "EGU5::INTEN"; };
template<> struct address_map< 0x40019304 > { static constexpr const char * name_str = "EGU5::INTENSET"; };
template<> struct address_map< 0x40019308 > { static constexpr const char * name_str = "EGU5::INTENCLR"; };
template<> struct address_map< 0x4001a000 > { static constexpr const char * name_str = "TIMER3::TASKS_START"; };
template<> struct address_map< 0x4001a004 > { static constexpr const char * name_str = "TIMER3::TASKS_STOP"; };
template<> struct address_map< 0x4001a008 > { static constexpr const char * name_str = "TIMER3::TASKS_COUNT"; };
template<> struct address_map< 0x4001a00c > { static constexpr const char * name_str = "TIMER3::TASKS_CLEAR"; };
template<> struct address_map< 0x4001a010 > { static constexpr const char * name_str = "TIMER3::TASKS_SHUTDOWN"; };
template<> struct address_map< 0x4001a040 > { static constexpr const char * name_str = "TIMER3::TASKS_CAPTURE[%s]"; };
template<> struct address_map< 0x4001a140 > { static constexpr const char * name_str = "TIMER3::EVENTS_COMPARE[%s]"; };
template<> struct address_map< 0x4001a200 > { static constexpr const char * name_str = "TIMER3::SHORTS"; };
template<> struct address_map< 0x4001a304 > { static constexpr const char * name_str = "TIMER3::INTENSET"; };
template<> struct address_map< 0x4001a308 > { static constexpr const char * name_str = "TIMER3::INTENCLR"; };
template<> struct address_map< 0x4001a504 > { static constexpr const char * name_str = "TIMER3::MODE"; };
template<> struct address_map< 0x4001a508 > { static constexpr const char * name_str = "TIMER3::BITMODE"; };
template<> struct address_map< 0x4001a510 > { static constexpr const char * name_str = "TIMER3::PRESCALER"; };
template<> struct address_map< 0x4001a540 > { static constexpr const char * name_str = "TIMER3::CC[%s]"; };
template<> struct address_map< 0x4001b000 > { static constexpr const char * name_str = "TIMER4::TASKS_START"; };
template<> struct address_map< 0x4001b004 > { static constexpr const char * name_str = "TIMER4::TASKS_STOP"; };
template<> struct address_map< 0x4001b008 > { static constexpr const char * name_str = "TIMER4::TASKS_COUNT"; };
template<> struct address_map< 0x4001b00c > { static constexpr const char * name_str = "TIMER4::TASKS_CLEAR"; };
template<> struct address_map< 0x4001b010 > { static constexpr const char * name_str = "TIMER4::TASKS_SHUTDOWN"; };
template<> struct address_map< 0x4001b040 > { static constexpr const char * name_str = "TIMER4::TASKS_CAPTURE[%s]"; };
template<> struct address_map< 0x4001b140 > { static constexpr const char * name_str = "TIMER4::EVENTS_COMPARE[%s]"; };
template<> struct address_map< 0x4001b200 > { static constexpr const char * name_str = "TIMER4::SHORTS"; };
template<> struct address_map< 0x4001b304 > { static constexpr const char * name_str = "TIMER4::INTENSET"; };
template<> struct address_map< 0x4001b308 > { static constexpr const char * name_str = "TIMER4::INTENCLR"; };
template<> struct address_map< 0x4001b504 > { static constexpr const char * name_str = "TIMER4::MODE"; };
template<> struct address_map< 0x4001b508 > { static constexpr const char * name_str = "TIMER4::BITMODE"; };
template<> struct address_map< 0x4001b510 > { static constexpr const char * name_str = "TIMER4::PRESCALER"; };
template<> struct address_map< 0x4001b540 > { static constexpr const char * name_str = "TIMER4::CC[%s]"; };
template<> struct address_map< 0x4001c004 > { static constexpr const char * name_str = "PWM0::TASKS_STOP"; };
template<> struct address_map< 0x4001c008 > { static constexpr const char * name_str = "PWM0::TASKS_SEQSTART[%s]"; };
template<> struct address_map< 0x4001c010 > { static constexpr const char * name_str = "PWM0::TASKS_NEXTSTEP"; };
template<> struct address_map< 0x4001c104 > { static constexpr const char * name_str = "PWM0::EVENTS_STOPPED"; };
template<> struct address_map< 0x4001c108 > { static constexpr const char * name_str = "PWM0::EVENTS_SEQSTARTED[%s]"; };
template<> struct address_map< 0x4001c110 > { static constexpr const char * name_str = "PWM0::EVENTS_SEQEND[%s]"; };
template<> struct address_map< 0x4001c118 > { static constexpr const char * name_str = "PWM0::EVENTS_PWMPERIODEND"; };
template<> struct address_map< 0x4001c11c > { static constexpr const char * name_str = "PWM0::EVENTS_LOOPSDONE"; };
template<> struct address_map< 0x4001c200 > { static constexpr const char * name_str = "PWM0::SHORTS"; };
template<> struct address_map< 0x4001c300 > { static constexpr const char * name_str = "PWM0::INTEN"; };
template<> struct address_map< 0x4001c304 > { static constexpr const char * name_str = "PWM0::INTENSET"; };
template<> struct address_map< 0x4001c308 > { static constexpr const char * name_str = "PWM0::INTENCLR"; };
template<> struct address_map< 0x4001c500 > { static constexpr const char * name_str = "PWM0::ENABLE"; };
template<> struct address_map< 0x4001c504 > { static constexpr const char * name_str = "PWM0::MODE"; };
template<> struct address_map< 0x4001c508 > { static constexpr const char * name_str = "PWM0::COUNTERTOP"; };
template<> struct address_map< 0x4001c50c > { static constexpr const char * name_str = "PWM0::PRESCALER"; };
template<> struct address_map< 0x4001c510 > { static constexpr const char * name_str = "PWM0::DECODER"; };
template<> struct address_map< 0x4001c514 > { static constexpr const char * name_str = "PWM0::LOOP"; };
template<> struct address_map< 0x4001d000 > { static constexpr const char * name_str = "PDM::TASKS_START"; };
template<> struct address_map< 0x4001d004 > { static constexpr const char * name_str = "PDM::TASKS_STOP"; };
template<> struct address_map< 0x4001d100 > { static constexpr const char * name_str = "PDM::EVENTS_STARTED"; };
template<> struct address_map< 0x4001d104 > { static constexpr const char * name_str = "PDM::EVENTS_STOPPED"; };
template<> struct address_map< 0x4001d108 > { static constexpr const char * name_str = "PDM::EVENTS_END"; };
template<> struct address_map< 0x4001d300 > { static constexpr const char * name_str = "PDM::INTEN"; };
template<> struct address_map< 0x4001d304 > { static constexpr const char * name_str = "PDM::INTENSET"; };
template<> struct address_map< 0x4001d308 > { static constexpr const char * name_str = "PDM::INTENCLR"; };
template<> struct address_map< 0x4001d500 > { static constexpr const char * name_str = "PDM::ENABLE"; };
template<> struct address_map< 0x4001d504 > { static constexpr const char * name_str = "PDM::PDMCLKCTRL"; };
template<> struct address_map< 0x4001d508 > { static constexpr const char * name_str = "PDM::MODE"; };
template<> struct address_map< 0x4001d518 > { static constexpr const char * name_str = "PDM::GAINL"; };
template<> struct address_map< 0x4001d51c > { static constexpr const char * name_str = "PDM::GAINR"; };
template<> struct address_map< 0x4001e400 > { static constexpr const char * name_str = "NVMC::READY"; };
template<> struct address_map< 0x4001e504 > { static constexpr const char * name_str = "NVMC::CONFIG"; };
template<> struct address_map< 0x4001e508 > { static constexpr const char * name_str = "NVMC::ERASEPCR1"; };  /* svd2hpp: duplicate address for: NVMC::ERASEPAGE, NVMC::ERASEPCR1 */
template<> struct address_map< 0x4001e50c > { static constexpr const char * name_str = "NVMC::ERASEALL"; };
template<> struct address_map< 0x4001e510 > { static constexpr const char * name_str = "NVMC::ERASEPCR0"; };
template<> struct address_map< 0x4001e514 > { static constexpr const char * name_str = "NVMC::ERASEUICR"; };
template<> struct address_map< 0x4001e540 > { static constexpr const char * name_str = "NVMC::ICACHECNF"; };
template<> struct address_map< 0x4001e548 > { static constexpr const char * name_str = "NVMC::IHIT"; };
template<> struct address_map< 0x4001e54c > { static constexpr const char * name_str = "NVMC::IMISS"; };
template<> struct address_map< 0x4001f500 > { static constexpr const char * name_str = "PPI::CHEN"; };
template<> struct address_map< 0x4001f504 > { static constexpr const char * name_str = "PPI::CHENSET"; };
template<> struct address_map< 0x4001f508 > { static constexpr const char * name_str = "PPI::CHENCLR"; };
template<> struct address_map< 0x4001f800 > { static constexpr const char * name_str = "PPI::CHG[%s]"; };
template<> struct address_map< 0x40020300 > { static constexpr const char * name_str = "MWU::INTEN"; };
template<> struct address_map< 0x40020304 > { static constexpr const char * name_str = "MWU::INTENSET"; };
template<> struct address_map< 0x40020308 > { static constexpr const char * name_str = "MWU::INTENCLR"; };
template<> struct address_map< 0x40020320 > { static constexpr const char * name_str = "MWU::NMIEN"; };
template<> struct address_map< 0x40020324 > { static constexpr const char * name_str = "MWU::NMIENSET"; };
template<> struct address_map< 0x40020328 > { static constexpr const char * name_str = "MWU::NMIENCLR"; };
template<> struct address_map< 0x40020510 > { static constexpr const char * name_str = "MWU::REGIONEN"; };
template<> struct address_map< 0x40020514 > { static constexpr const char * name_str = "MWU::REGIONENSET"; };
template<> struct address_map< 0x40020518 > { static constexpr const char * name_str = "MWU::REGIONENCLR"; };
template<> struct address_map< 0x40021004 > { static constexpr const char * name_str = "PWM1::TASKS_STOP"; };
template<> struct address_map< 0x40021008 > { static constexpr const char * name_str = "PWM1::TASKS_SEQSTART[%s]"; };
template<> struct address_map< 0x40021010 > { static constexpr const char * name_str = "PWM1::TASKS_NEXTSTEP"; };
template<> struct address_map< 0x40021104 > { static constexpr const char * name_str = "PWM1::EVENTS_STOPPED"; };
template<> struct address_map< 0x40021108 > { static constexpr const char * name_str = "PWM1::EVENTS_SEQSTARTED[%s]"; };
template<> struct address_map< 0x40021110 > { static constexpr const char * name_str = "PWM1::EVENTS_SEQEND[%s]"; };
template<> struct address_map< 0x40021118 > { static constexpr const char * name_str = "PWM1::EVENTS_PWMPERIODEND"; };
template<> struct address_map< 0x4002111c > { static constexpr const char * name_str = "PWM1::EVENTS_LOOPSDONE"; };
template<> struct address_map< 0x40021200 > { static constexpr const char * name_str = "PWM1::SHORTS"; };
template<> struct address_map< 0x40021300 > { static constexpr const char * name_str = "PWM1::INTEN"; };
template<> struct address_map< 0x40021304 > { static constexpr const char * name_str = "PWM1::INTENSET"; };
template<> struct address_map< 0x40021308 > { static constexpr const char * name_str = "PWM1::INTENCLR"; };
template<> struct address_map< 0x40021500 > { static constexpr const char * name_str = "PWM1::ENABLE"; };
template<> struct address_map< 0x40021504 > { static constexpr const char * name_str = "PWM1::MODE"; };
template<> struct address_map< 0x40021508 > { static constexpr const char * name_str = "PWM1::COUNTERTOP"; };
template<> struct address_map< 0x4002150c > { static constexpr const char * name_str = "PWM1::PRESCALER"; };
template<> struct address_map< 0x40021510 > { static constexpr const char * name_str = "PWM1::DECODER"; };
template<> struct address_map< 0x40021514 > { static constexpr const char * name_str = "PWM1::LOOP"; };
template<> struct address_map< 0x40022004 > { static constexpr const char * name_str = "PWM2::TASKS_STOP"; };
template<> struct address_map< 0x40022008 > { static constexpr const char * name_str = "PWM2::TASKS_SEQSTART[%s]"; };
template<> struct address_map< 0x40022010 > { static constexpr const char * name_str = "PWM2::TASKS_NEXTSTEP"; };
template<> struct address_map< 0x40022104 > { static constexpr const char * name_str = "PWM2::EVENTS_STOPPED"; };
template<> struct address_map< 0x40022108 > { static constexpr const char * name_str = "PWM2::EVENTS_SEQSTARTED[%s]"; };
template<> struct address_map< 0x40022110 > { static constexpr const char * name_str = "PWM2::EVENTS_SEQEND[%s]"; };
template<> struct address_map< 0x40022118 > { static constexpr const char * name_str = "PWM2::EVENTS_PWMPERIODEND"; };
template<> struct address_map< 0x4002211c > { static constexpr const char * name_str = "PWM2::EVENTS_LOOPSDONE"; };
template<> struct address_map< 0x40022200 > { static constexpr const char * name_str = "PWM2::SHORTS"; };
template<> struct address_map< 0x40022300 > { static constexpr const char * name_str = "PWM2::INTEN"; };
template<> struct address_map< 0x40022304 > { static constexpr const char * name_str = "PWM2::INTENSET"; };
template<> struct address_map< 0x40022308 > { static constexpr const char * name_str = "PWM2::INTENCLR"; };
template<> struct address_map< 0x40022500 > { static constexpr const char * name_str = "PWM2::ENABLE"; };
template<> struct address_map< 0x40022504 > { static constexpr const char * name_str = "PWM2::MODE"; };
template<> struct address_map< 0x40022508 > { static constexpr const char * name_str = "PWM2::COUNTERTOP"; };
template<> struct address_map< 0x4002250c > { static constexpr const char * name_str = "PWM2::PRESCALER"; };
template<> struct address_map< 0x40022510 > { static constexpr const char * name_str = "PWM2::DECODER"; };
template<> struct address_map< 0x40022514 > { static constexpr const char * name_str = "PWM2::LOOP"; };
template<> struct address_map< 0x40023010 > { static constexpr const char * name_str = "SPIM2::TASKS_START"; };
template<> struct address_map< 0x40023014 > { static constexpr const char * name_str = "SPIM2::TASKS_STOP"; };
template<> struct address_map< 0x4002301c > { static constexpr const char * name_str = "SPIM2::TASKS_SUSPEND"; };
template<> struct address_map< 0x40023020 > { static constexpr const char * name_str = "SPIM2::TASKS_RESUME"; };
template<> struct address_map< 0x40023024 > { static constexpr const char * name_str = "SPIS2::TASKS_ACQUIRE"; };
template<> struct address_map< 0x40023028 > { static constexpr const char * name_str = "SPIS2::TASKS_RELEASE"; };
template<> struct address_map< 0x40023104 > { static constexpr const char * name_str = "SPIS2::EVENTS_END"; };  /* svd2hpp: duplicate address for: SPIM2::EVENTS_STOPPED, SPIS2::EVENTS_END */
template<> struct address_map< 0x40023108 > { static constexpr const char * name_str = "SPI2::EVENTS_READY"; };
template<> struct address_map< 0x40023110 > { static constexpr const char * name_str = "SPIM2::EVENTS_ENDRX"; };
template<> struct address_map< 0x40023118 > { static constexpr const char * name_str = "SPIM2::EVENTS_END"; };
template<> struct address_map< 0x40023120 > { static constexpr const char * name_str = "SPIM2::EVENTS_ENDTX"; };
template<> struct address_map< 0x40023128 > { static constexpr const char * name_str = "SPIS2::EVENTS_ACQUIRED"; };
template<> struct address_map< 0x4002314c > { static constexpr const char * name_str = "SPIM2::EVENTS_STARTED"; };
template<> struct address_map< 0x40023200 > { static constexpr const char * name_str = "SPIS2::SHORTS"; };  /* svd2hpp: duplicate address for: SPIM2::SHORTS, SPIS2::SHORTS */
template<> struct address_map< 0x40023304 > { static constexpr const char * name_str = "SPI2::INTENSET"; };  /* svd2hpp: duplicate address for: SPI2::INTENSET, SPIM2::INTENSET, SPIS2::INTENSET */
template<> struct address_map< 0x40023308 > { static constexpr const char * name_str = "SPI2::INTENCLR"; };  /* svd2hpp: duplicate address for: SPI2::INTENCLR, SPIM2::INTENCLR, SPIS2::INTENCLR */
template<> struct address_map< 0x40023400 > { static constexpr const char * name_str = "SPIS2::SEMSTAT"; };
template<> struct address_map< 0x40023440 > { static constexpr const char * name_str = "SPIS2::STATUS"; };
template<> struct address_map< 0x40023500 > { static constexpr const char * name_str = "SPI2::ENABLE"; };  /* svd2hpp: duplicate address for: SPI2::ENABLE, SPIM2::ENABLE, SPIS2::ENABLE */
template<> struct address_map< 0x40023518 > { static constexpr const char * name_str = "SPI2::RXD"; };
template<> struct address_map< 0x4002351c > { static constexpr const char * name_str = "SPI2::TXD"; };
template<> struct address_map< 0x40023524 > { static constexpr const char * name_str = "SPI2::FREQUENCY"; };  /* svd2hpp: duplicate address for: SPI2::FREQUENCY, SPIM2::FREQUENCY */
template<> struct address_map< 0x40023554 > { static constexpr const char * name_str = "SPI2::CONFIG"; };  /* svd2hpp: duplicate address for: SPI2::CONFIG, SPIM2::CONFIG, SPIS2::CONFIG */
template<> struct address_map< 0x4002355c > { static constexpr const char * name_str = "SPIS2::DEF"; };
template<> struct address_map< 0x400235c0 > { static constexpr const char * name_str = "SPIS2::ORC"; };  /* svd2hpp: duplicate address for: SPIM2::ORC, SPIS2::ORC */
template<> struct address_map< 0x40024000 > { static constexpr const char * name_str = "RTC2::TASKS_START"; };
template<> struct address_map< 0x40024004 > { static constexpr const char * name_str = "RTC2::TASKS_STOP"; };
template<> struct address_map< 0x40024008 > { static constexpr const char * name_str = "RTC2::TASKS_CLEAR"; };
template<> struct address_map< 0x4002400c > { static constexpr const char * name_str = "RTC2::TASKS_TRIGOVRFLW"; };
template<> struct address_map< 0x40024100 > { static constexpr const char * name_str = "RTC2::EVENTS_TICK"; };
template<> struct address_map< 0x40024104 > { static constexpr const char * name_str = "RTC2::EVENTS_OVRFLW"; };
template<> struct address_map< 0x40024140 > { static constexpr const char * name_str = "RTC2::EVENTS_COMPARE[%s]"; };
template<> struct address_map< 0x40024304 > { static constexpr const char * name_str = "RTC2::INTENSET"; };
template<> struct address_map< 0x40024308 > { static constexpr const char * name_str = "RTC2::INTENCLR"; };
template<> struct address_map< 0x40024340 > { static constexpr const char * name_str = "RTC2::EVTEN"; };
template<> struct address_map< 0x40024344 > { static constexpr const char * name_str = "RTC2::EVTENSET"; };
template<> struct address_map< 0x40024348 > { static constexpr const char * name_str = "RTC2::EVTENCLR"; };
template<> struct address_map< 0x40024504 > { static constexpr const char * name_str = "RTC2::COUNTER"; };
template<> struct address_map< 0x40024508 > { static constexpr const char * name_str = "RTC2::PRESCALER"; };
template<> struct address_map< 0x40024540 > { static constexpr const char * name_str = "RTC2::CC[%s]"; };
template<> struct address_map< 0x40025000 > { static constexpr const char * name_str = "I2S::TASKS_START"; };
template<> struct address_map< 0x40025004 > { static constexpr const char * name_str = "I2S::TASKS_STOP"; };
template<> struct address_map< 0x40025104 > { static constexpr const char * name_str = "I2S::EVENTS_RXPTRUPD"; };
template<> struct address_map< 0x40025108 > { static constexpr const char * name_str = "I2S::EVENTS_STOPPED"; };
template<> struct address_map< 0x40025114 > { static constexpr const char * name_str = "I2S::EVENTS_TXPTRUPD"; };
template<> struct address_map< 0x40025300 > { static constexpr const char * name_str = "I2S::INTEN"; };
template<> struct address_map< 0x40025304 > { static constexpr const char * name_str = "I2S::INTENSET"; };
template<> struct address_map< 0x40025308 > { static constexpr const char * name_str = "I2S::INTENCLR"; };
template<> struct address_map< 0x40025500 > { static constexpr const char * name_str = "I2S::ENABLE"; };
template<> struct address_map< 0x50000504 > { static constexpr const char * name_str = "P0::OUT"; };
template<> struct address_map< 0x50000508 > { static constexpr const char * name_str = "P0::OUTSET"; };
template<> struct address_map< 0x5000050c > { static constexpr const char * name_str = "P0::OUTCLR"; };
template<> struct address_map< 0x50000510 > { static constexpr const char * name_str = "P0::IN"; };
template<> struct address_map< 0x50000514 > { static constexpr const char * name_str = "P0::DIR"; };
template<> struct address_map< 0x50000518 > { static constexpr const char * name_str = "P0::DIRSET"; };
template<> struct address_map< 0x5000051c > { static constexpr const char * name_str = "P0::DIRCLR"; };
template<> struct address_map< 0x50000520 > { static constexpr const char * name_str = "P0::LATCH"; };
template<> struct address_map< 0x50000524 > { static constexpr const char * name_str = "P0::DETECTMODE"; };
template<> struct address_map< 0x50000700 > { static constexpr const char * name_str = "P0::PIN_CNF[%s]"; };

} // namespace mptl

#endif // ARCH_REG_ADDRESS_MAP_HPP_INCLUDED
